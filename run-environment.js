/*运行环境：
1、浏览器可以通过访问链接来得到页面的内容
2、通过绘制和渲染，显示出页面最终的样子

知识点：
1、页面加载过程
2、性能优化
3、安全性
*/

/*页面加载知识点：
1、加载资源的形式：
       输入url加载html
       加载html中的静态资源
2、加载一个资源的过程：
		1、浏览器根据DNS服务器得到域名的IP地址
		2、向这个IP的机器发送HTTP请求
		3、服务器收到、处理并返回这个请求
		4、浏览器得到返回内容
3、浏览器渲染页面的过程
		1、根据HTML结构生成DOM Tree
		2、根据CSS生成CSS Object Model(CSS代码结构化处理)
		3、将DOM和CSSOM整合形成RenderTree
		4、根据RenderTree开始渲染和展示
		5、遇到<script>时，会执行并阻塞渲染（因为JS是可以改变DOM的）
*/
/*从输入url到得到html的详细过程：
*/
/*window.onload和DOMContentLoaded的区别：
	前者：window.addEventListener('load',function(){
		//页面的全部资源加载完才会执行，包括图片、视频等（图片是异步加载的）
	})
	后者：document.addEventListener('DOMContentLoaded',function(){
		//DOM渲染完即可执行，此时图片、视频还可能没有加载完
	})
*/
/////////////////////////////////////////////////////////////////////////////////////

/*性能优化：综合性的问题
1、多使用内存、缓存或其他方式
2、减少CPU计算，减少网络
*/

/*加载资源优化：
1、静态资源的合并压缩
2、静态资源缓存
3、使用CDN让资源加载更快
4、使用SSR（server side render）后端渲染，数据直接输出到HTML中
*/

/*渲染优化：
1、CSS放前面，JS放后面
2、懒加载（图片懒加载，下拉加载更多）
3、减少DOM查询，对DOM查询做缓存
4、减少DOM操作，多个操作尽量合并在一起执行
5、事件节流
6、尽早执行操作（如DOMContentLoaded）
*/
//////////////////////////////////////////////////////////////////

/*安全性：
1、XSS跨站请求攻击
eg:在新浪博客写一篇文章，同时偷偷插入一段<script>
   攻击代码中，获取cookie，发送到自己的服务器
   发布博客，有人查看博客内容
   会把查看者的cookie发送到攻击者的服务器
预防：
   后端替换关键字，例如<为&lt,>为&gt

2、XSRF跨站请求伪造
eg:你已登录一个购物网站，正在浏览商品
   该网站付费借口是***.com/pay?id=100，但是没有任何验证
   然后你收到一封邮件，隐藏着<img src=***.com/pay?id=100>
   你查看邮件的时候，就已经悄悄的付费购买了
预防：
   增加验证流程，如输入指纹、密码、短信验证码
*/